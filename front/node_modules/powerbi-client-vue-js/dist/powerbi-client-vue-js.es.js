import { defineComponent, h, toRaw } from "vue";
import { service, factories, Embed, Visual, Qna, Tile, Dashboard, Report } from "powerbi-client";
const name = "powerbi-client-vue-js";
const version = "1.0.3";
const description = "VueJS wrapper for powerbi-client library";
const files = [
  "dist"
];
const main = "./dist/powerbi-client-vue-js.es.js";
const module = "./dist/powerbi-client-vue-js.umd.js";
const types = "./dist/types/src/public-api.d.ts";
const scripts = {
  dev: "vite",
  build: "vite build && vue-tsc --declaration --emitDeclarationOnly",
  preview: "vite preview",
  lint: "eslint ./src --ext .ts",
  test: "jest src",
  demo: "cd demo && npm run dev",
  "install:demo": "cd demo && npm install"
};
const keywords = [
  "microsoft",
  "powerbi",
  "embedded",
  "vue-js"
];
const repository = {
  type: "git",
  url: ""
};
const license = "MIT";
const dependencies = {
  "powerbi-client": "^2.21.1",
  "powerbi-report-authoring": "^1.1.3",
  vue: "^3.2.25"
};
const devDependencies = {
  "@types/jest": "^28.1.3",
  "@typescript-eslint/eslint-plugin": "^5.33.0",
  "@typescript-eslint/parser": "^5.33.0",
  "@vitejs/plugin-vue": "^2.3.3",
  "@vue/test-utils": "^2.0.0",
  eslint: "^7.32.0",
  "eslint-plugin-vue": "^8.0.3",
  jest: "^26.6.3",
  "ts-jest": "^26.5.6",
  typescript: "^4.5.4",
  vite: "^2.9.9",
  "vue-jest": "^5.0.0-alpha.10",
  "vue-tsc": "^0.34.7"
};
var packageInfo = {
  name,
  version,
  description,
  files,
  main,
  module,
  types,
  scripts,
  keywords,
  repository,
  license,
  dependencies,
  devDependencies
};
function areMapsSame(oldMap, newMap) {
  if (oldMap.size !== newMap.size) {
    return false;
  }
  for (const [key, oldVal] of oldMap) {
    if (!newMap.has(key)) {
      return false;
    }
    const newVal = newMap.get(key);
    if (JSON.stringify(newVal) !== JSON.stringify(oldVal)) {
      return false;
    }
  }
  return true;
}
const SdkType = "powerbi-client-vue-js";
const SdkWrapperVersion = packageInfo.version;
var PowerBIBase = defineComponent({
  name: "PowerBIBase",
  props: {
    cssClassName: {
      type: String
    },
    service: {
      type: service.Service
    }
  },
  data() {
    const powerbi = this.service ? this.service : new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);
    powerbi.setSdkInfo(SdkType, SdkWrapperVersion);
    const prevEventHandlerMap = /* @__PURE__ */ new Map([]);
    let embed;
    return {
      powerbi,
      prevEventHandlerMap,
      embed
    };
  },
  methods: {
    setEventHandlers(embed, eventHandlerMap) {
      if (areMapsSame(this.prevEventHandlerMap, eventHandlerMap)) {
        return;
      }
      this.prevEventHandlerMap = eventHandlerMap;
      let allowedEvents = Embed.allowedEvents;
      const entityType = embed.embedtype;
      switch (entityType) {
        case "report":
          allowedEvents = [...allowedEvents, ...Report.allowedEvents];
          break;
        case "dashboard":
          allowedEvents = [...allowedEvents, ...Dashboard.allowedEvents];
          break;
        case "tile":
          allowedEvents = [...allowedEvents, ...Tile.allowedEvents];
          break;
        case "qna":
          allowedEvents = [...allowedEvents, ...Qna.allowedEvents];
          break;
        case "visual":
          allowedEvents = [...allowedEvents, ...Visual.allowedEvents];
          break;
        default:
          console.error(`Invalid embed type ${entityType}`);
      }
      const invalidEvents = [];
      eventHandlerMap.forEach((eventHandlerMethod, eventName) => {
        if (allowedEvents.includes(eventName)) {
          embed.off(eventName);
          if (eventHandlerMethod) {
            embed.on(eventName, (event) => {
              eventHandlerMethod(event, embed);
            });
          }
        } else {
          invalidEvents.push(eventName);
        }
      });
      if (invalidEvents.length) {
        console.error(`Following events are invalid: ${invalidEvents.join(",")}`);
      }
    }
  }
});
var PowerBIReportEmbed = defineComponent({
  name: "PowerBIReportEmbed",
  emits: ["report-obj"],
  props: {
    embedConfig: {
      type: Object,
      required: true
    },
    phasedEmbedding: {
      type: Boolean,
      default: false
    },
    eventHandlers: {
      type: Map
    }
  },
  mixins: [PowerBIBase],
  render() {
    return h("div", { ref: "containerRef", class: this.cssClassName, id: "reportContainer" });
  },
  watch: {
    embedConfig: function(value, oldValue) {
      if (!oldValue) {
        return;
      }
      this.embedOrBootstrap();
      this.callSetEventHandlers();
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return toRaw(this.embedConfig);
    }
  },
  mounted() {
    if (this.$refs.containerRef) {
      this.embedOrBootstrap();
    }
    this.callSetEventHandlers();
  },
  methods: {
    embedOrBootstrap() {
      var _a, _b;
      if (((_a = this.config) == null ? void 0 : _a.accessToken) && ((_b = this.config) == null ? void 0 : _b.embedUrl)) {
        this.embedReport();
      } else {
        this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.config);
      }
    },
    embedReport() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.phasedEmbedding ? this.powerbi.load(this.$refs.containerRef, this.config) : this.powerbi.embed(this.$refs.containerRef, this.config);
      this.$emit("report-obj", this.getReport());
    },
    callSetEventHandlers() {
      if (this.eventHandlers && this.embed) {
        this.setEventHandlers(this.embed, this.eventHandlers);
      }
    },
    getReport() {
      return this.embed;
    }
  }
});
var PowerBIDashboardEmbed = defineComponent({
  name: "PowerBIDashboardEmbed",
  props: {
    embedConfig: {
      type: Object,
      required: true
    },
    eventHandlers: {
      type: Map
    }
  },
  mixins: [PowerBIBase],
  render() {
    return h("div", { ref: "containerRef", class: this.cssClassName, id: "dashboardContainer" });
  },
  watch: {
    embedConfig: function(value, oldValue) {
      if (!oldValue) {
        return;
      }
      this.embedOrBootstrap();
      this.callSetEventHandlers();
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return toRaw(this.embedConfig);
    }
  },
  mounted() {
    if (this.$refs.containerRef) {
      this.embedOrBootstrap();
    }
    this.callSetEventHandlers();
  },
  methods: {
    embedOrBootstrap() {
      var _a, _b;
      if (((_a = this.config) == null ? void 0 : _a.accessToken) && ((_b = this.config) == null ? void 0 : _b.embedUrl)) {
        this.embedDashboard();
      } else {
        this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.config);
      }
    },
    embedDashboard() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.config);
    },
    callSetEventHandlers() {
      if (this.eventHandlers && this.embed) {
        this.setEventHandlers(this.embed, this.eventHandlers);
      }
    },
    getDashboard() {
      return this.embed;
    }
  }
});
var PowerBITileEmbed = defineComponent({
  name: "PowerBITileEmbed",
  props: {
    embedConfig: {
      type: Object,
      required: true
    },
    eventHandlers: {
      type: Map,
      required: false
    }
  },
  mixins: [PowerBIBase],
  render() {
    return h("div", { ref: "containerRef", class: this.cssClassName, id: "tileContainer" });
  },
  watch: {
    embedConfig: function(value, oldValue) {
      if (!oldValue) {
        return;
      }
      this.embedOrBootstrap();
      this.callSetEventHandlers();
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return toRaw(this.embedConfig);
    }
  },
  mounted() {
    if (this.$refs.containerRef) {
      this.embedOrBootstrap();
    }
    this.callSetEventHandlers();
  },
  methods: {
    embedOrBootstrap() {
      var _a, _b;
      if (((_a = this.embedConfig) == null ? void 0 : _a.accessToken) && ((_b = this.embedConfig) == null ? void 0 : _b.embedUrl)) {
        this.embedTile();
      } else {
        this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.embedConfig);
      }
    },
    embedTile() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.embedConfig);
    },
    callSetEventHandlers() {
      if (this.eventHandlers && this.embed) {
        this.setEventHandlers(this.embed, this.eventHandlers);
      }
    },
    getTile() {
      return this.embed;
    }
  }
});
var PowerBIPaginatedReportEmbed = defineComponent({
  name: "PowerBIPaginatedReportEmbed",
  props: {
    embedConfig: {
      type: Object,
      required: true
    }
  },
  mixins: [PowerBIBase],
  render() {
    return h("div", { ref: "containerRef", class: this.cssClassName, id: "paginatedReportContainer" });
  },
  watch: {
    embedConfig: function(value, oldValue) {
      if (!oldValue) {
        return;
      }
      this.embedPaginatedReport();
    }
  },
  computed: {
    config() {
      return toRaw(this.embedConfig);
    }
  },
  mounted() {
    if (this.$refs.containerRef) {
      this.embedPaginatedReport();
    }
  },
  methods: {
    embedPaginatedReport() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.config);
    }
  }
});
var PowerBIVisualEmbed = defineComponent({
  name: "PowerBIVisualEmbed",
  props: {
    embedConfig: {
      type: Object,
      required: true
    },
    eventHandlers: {
      type: Map
    }
  },
  mixins: [PowerBIBase],
  render() {
    return h("div", { ref: "containerRef", class: this.cssClassName, id: "visualContainer" });
  },
  watch: {
    embedConfig: function(value, oldValue) {
      if (!oldValue) {
        return;
      }
      this.embedOrBootstrap();
      this.callSetEventHandlers();
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return toRaw(this.embedConfig);
    }
  },
  mounted() {
    if (this.$refs.containerRef) {
      this.embedOrBootstrap();
    }
    this.callSetEventHandlers();
  },
  methods: {
    embedOrBootstrap() {
      var _a, _b;
      if (((_a = this.config) == null ? void 0 : _a.accessToken) && ((_b = this.config) == null ? void 0 : _b.embedUrl)) {
        this.embedVisual();
      } else {
        this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.config);
      }
    },
    embedVisual() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.config);
    },
    callSetEventHandlers() {
      if (this.eventHandlers && this.embed) {
        this.setEventHandlers(this.embed, this.eventHandlers);
      }
    },
    getVisual() {
      return this.embed;
    }
  }
});
var PowerBIQnaEmbed = defineComponent({
  name: "PowerBIQnaEmbed",
  props: {
    embedConfig: {
      type: Object,
      required: true
    },
    eventHandlers: {
      type: Map
    }
  },
  mixins: [PowerBIBase],
  render() {
    return h("div", { ref: "containerRef", class: this.cssClassName, id: "qnaContainer" });
  },
  watch: {
    embedConfig: function(value, oldValue) {
      if (!oldValue) {
        return;
      }
      this.embedOrBootstrap();
      this.callSetEventHandlers();
    },
    eventHandlers: function() {
      this.callSetEventHandlers();
    }
  },
  computed: {
    config() {
      return toRaw(this.embedConfig);
    }
  },
  mounted() {
    if (this.$refs.containerRef) {
      this.embedOrBootstrap();
    }
    this.callSetEventHandlers();
  },
  methods: {
    embedOrBootstrap() {
      var _a, _b;
      if (((_a = this.config) == null ? void 0 : _a.accessToken) && ((_b = this.config) == null ? void 0 : _b.embedUrl)) {
        this.embedQna();
      } else {
        this.embed = this.powerbi.bootstrap(this.$refs.containerRef, this.config);
      }
    },
    embedQna() {
      if (!this.$refs.containerRef) {
        console.error("HTML container is not rendered or available");
        return;
      }
      this.embed = this.powerbi.embed(this.$refs.containerRef, this.config);
    },
    callSetEventHandlers() {
      if (this.eventHandlers && this.embed) {
        this.setEventHandlers(this.embed, this.eventHandlers);
      }
    },
    getQna() {
      return this.embed;
    }
  }
});
export { PowerBIDashboardEmbed, PowerBIPaginatedReportEmbed, PowerBIQnaEmbed, PowerBIReportEmbed, PowerBITileEmbed, PowerBIVisualEmbed };

// SIG // Begin signature block
// SIG // MIIFwwYJKoZIhvcNAQcCoIIFtDCCBbACAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 0Jt0n5HboWF89Mt97IhxokXv/Hc0AjzkeHVMZWzQjQyg
// SIG // ggM6MIIDNjCCAh6gAwIBAgIQbkFYlRmcNrtPF7+sTlHY
// SIG // qDANBgkqhkiG9w0BAQsFADAkMSIwIAYDVQQDDBlUZXN0
// SIG // QXp1cmVFbmdCdWlsZENvZGVTaWduMB4XDTE5MTIxNjIz
// SIG // NTQwOVoXDTMwMDcxNzAwMDQwOVowJDEiMCAGA1UEAwwZ
// SIG // VGVzdEF6dXJlRW5nQnVpbGRDb2RlU2lnbjCCASIwDQYJ
// SIG // KoZIhvcNAQEBBQADggEPADCCAQoCggEBALdzomGcnPIf
// SIG // VrbQmes/YzjpYQizlnMPPcHRGLyQ36wob3hZtNcytONq
// SIG // LuTTmKihBw3TdvanCSA66hLWpyrzPSWY2orxRoxAOtxx
// SIG // rgC218L5jfwZbdpRYjNEIkkPEcnKeK2qcutBcKPWnFRI
// SIG // LCpiJe1mfW3RRmi4XWqdqMr6RKW04RzcmzJ1iEP/d4EI
// SIG // 8Bq9KBF+oWiGtyOMOQp6Mo+jDk+03mi+lpvbfWXrSH3o
// SIG // KYhIwfzc0pvMXYZmkdfEJXfb0Uc4dGUpulYegxLuc8Ox
// SIG // k7NfZnZ24ZkrKI8sY1imT/meC/ULzY8ZULKHSq6Nhv5n
// SIG // Cv3I/aHmkGg3wTPuZ/P6RAUCAwEAAaNkMGIwDgYDVR0P
// SIG // AQH/BAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMBwG
// SIG // A1UdEQQVMBOCEXd3dy5taWNyb3NvZnQuY29tMB0GA1Ud
// SIG // DgQWBBQad2ypaosFSN3WN49F/B1fxJLrvzANBgkqhkiG
// SIG // 9w0BAQsFAAOCAQEAmSwp158iRcD7f/q+P5GMaqoK2i7r
// SIG // fmiJWxZqZ7kPlpWx4V7mkwKWqrfhIXxUaFmjOZL/Dact
// SIG // jdFQ1cIPXF8QCPmPc2yIAkFwMAVgBQmOdOs42pRFRVug
// SIG // SrXyPAfx59DPu33mV6qj8b30+GX2KLYMto4A6O7A7eT4
// SIG // YavNvoAuUdvlTKZ241BrqK/3ykKyJ7VfNKhLgnJrk/8e
// SIG // t0Wu8N9yp6wZcCO/LBuw3xuFAciHDnHFNHoW6cgLzpkd
// SIG // 0nbAcarkmHPmkpex1VxoTfUT2DTfQABGX0TuQpxX/PeN
// SIG // ry+iU/rlb+KO5Xk6JEokSP/KqBKFPhfO4oFpJ91QcvGb
// SIG // x+aOpTGCAeEwggHdAgEBMDgwJDEiMCAGA1UEAwwZVGVz
// SIG // dEF6dXJlRW5nQnVpbGRDb2RlU2lnbgIQbkFYlRmcNrtP
// SIG // F7+sTlHYqDANBglghkgBZQMEAgEFAKB8MBAGCisGAQQB
// SIG // gjcCAQwxAjAAMBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3
// SIG // AgEEMBwGCisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEV
// SIG // MC8GCSqGSIb3DQEJBDEiBCDMNuOR4Sjn0ab9+nTmM+Dg
// SIG // IPEdxXPwBsa1KnA/0RSpnTANBgkqhkiG9w0BAQEFAASC
// SIG // AQAqLXzijONpBsmm1hOvZkCfsopd6vkxZ3Qf/GQdbfce
// SIG // kPfV2BR4fvjcBbY/1nAtiVEbHlGMGQ8W95NzD4XaqjTZ
// SIG // 3s3KnU9EXeHWdG7/yImKD8rQZJp/WP5GbWtU3VFAgra/
// SIG // oOHOOgOmYeoNR931AUPObMhPZ9U+E4gkV56CotAeIiIl
// SIG // WT5qjBGw9F9gDvdmW3bJZZmH7dnpaN8iP4HhWa5raCIz
// SIG // JLPwknAhi2EywqxbOXa8g3z84YNahGzWnZjbiP+UR4S9
// SIG // xRh80hL821aUnDrLT8AmXK9Y4W1lyu+YbZprXz/UqaZE
// SIG // plw2q/LijP0qdlhQvcRcSO87ERfEnnO8kQXV
// SIG // End signature block
