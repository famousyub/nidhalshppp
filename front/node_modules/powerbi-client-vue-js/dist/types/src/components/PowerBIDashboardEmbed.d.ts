import { PropType } from 'vue';
import { IDashboardEmbedConfiguration, Embed, Dashboard } from 'powerbi-client';
import { EventHandler } from '../utils/utils';
declare const _default: import("vue").DefineComponent<{
    embedConfig: {
        type: PropType<import("powerbi-models").IDashboardEmbedConfiguration>;
        required: true;
    };
    eventHandlers: {
        type: PropType<Map<string, EventHandler>>;
    };
}, unknown, unknown, {
    config(): IDashboardEmbedConfiguration;
}, {
    /**
     * Function to decide to embed or bootstrap
     *
     * @returns void
     */
    embedOrBootstrap(): void;
    /**
     * Embed the PowerBI Dashboard
     *
     * @returns void
     */
    embedDashboard(): void;
    /**
     * Set event handlers if available
     *
     * @returns void
     */
    callSetEventHandlers(): void;
    getDashboard(): Dashboard;
}, import("vue").DefineComponent<{
    cssClassName: {
        type: StringConstructor;
    };
    service: {
        type: typeof import("service").Service;
    };
}, unknown, {
    powerbi: import("service").Service;
    prevEventHandlerMap: Map<string, EventHandler>;
    embed: Embed;
}, {}, {
    setEventHandlers(embed: Embed, eventHandlerMap: Map<string, EventHandler>): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cssClassName: {
        type: StringConstructor;
    };
    service: {
        type: typeof import("service").Service;
    };
}>>, {}>, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    embedConfig: {
        type: PropType<import("powerbi-models").IDashboardEmbedConfiguration>;
        required: true;
    };
    eventHandlers: {
        type: PropType<Map<string, EventHandler>>;
    };
}>>, {}>;
export default _default;
